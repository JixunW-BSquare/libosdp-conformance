#!/usr/bin/env python3

'''
OSDP-Poke

Use --help to get help.
Can also be used as a module to poke programmly.

Supports Python 3.x
'''

import sys
import argparse
import socket
import os
import time
import json
import re

OSDP_BASE_DIR = "./tmp"

OSDP_LCL_CA_KEYS        = OSDP_BASE_DIR + "/etc/ca_keys.pem"
OSDP_LCL_SERVER_CERT    = OSDP_BASE_DIR + "/etc/cert.pem"
OSDP_LCL_SERVER_KEY     = OSDP_BASE_DIR + "/etc/key.pem"
OSDP_LCL_COMMAND_PATH   = OSDP_BASE_DIR + "/run/%s/open_osdp_command.json"
OSDP_LCL_STATUS_PATH    = OSDP_BASE_DIR + "/run/%s/open-osdp-status.json"
OSDP_LCL_SERVER_RESULTS = OSDP_BASE_DIR + "/run/%s"
OSDP_LCL_UNIX_SOCKET    = OSDP_BASE_DIR + "/run/%s/open-osdp-control"

COMMON_KEYS = [
    "role", "#", "serial_speed", "pd_address", "max_pd_send", "cp_polls",
    "pd_acks", "sent_naks", "out-00", "out-01", "out-02", "out-03",
    "out-04", "out-05", "out-06", "out-07", "out-08", "out-09", "out-10",
    "out-11", "out-12", "out-13", "out-14", "out-15", "power_report",
    "verbosity", "crc", "timeout", "poll", "dump", "checksum_errors",
    "keypad_last_8", "raw_data_bits", "raw_data", "last_update"
]

def file_exists(path):
    '''
    check if given file path exists.
    '''
    return os.path.exists(path)

def print_erasable(string):
    '''
    print an erasable line.
    '''
    sys.stderr.write(string + '\r')
    sys.stderr.flush()

def delete_file(path):
    '''
    delete a file if exists without raise an exception.
    '''
    if file_exists(path):
        os.unlink(path)

def clear_line():
    '''
    clear current line.
    '''
    print('\033[2K', end='')
    sys.stdout.flush()

def print_json(string, remove_common_attrs=False):
    '''
    format and print given json string.
    '''
    data = json.loads(string)
    if remove_common_attrs:
        for attr in COMMON_KEYS:
            data.pop(attr, None)
    print(json.dumps(data, indent=2))

def poke(cmd, tag, remove_common_attrs=True):
    '''
    poke the CP / PD so it will process the command.
    '''

    if re.match(r'^[\w\s_-]+$', cmd):
        cmd = json.dumps({"command": cmd})

    try:
        json.loads(cmd)
    except Exception as ex:
        print('invalid json supplied. check your input (%s)' % cmd)
        raise ex

    # prepare command
    print_erasable("writing command...")
    cmd_path = OSDP_LCL_COMMAND_PATH % tag
    delete_file(cmd_path)
    with open(cmd_path, 'w') as file:
        file.write(cmd)
    clear_line()
    print("Wrote command: ", end='')
    print_json(cmd)

    # poke so it knows it need to execute command
    result_path = OSDP_LCL_STATUS_PATH % tag
    delete_file(result_path)

    socket_path = OSDP_LCL_UNIX_SOCKET % tag
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(socket_path)
    sock.send(bytes('< poke >', 'utf-8'))

    print_erasable("waiting for result...")
    counter = 10
    while not os.path.exists(result_path):
        if counter == 0:
            clear_line()
            print("wait timeout, did it crash?")
            return
        time.sleep(0.3)
        counter -= 1

    clear_line()

    print("Got reply: ", end='')
    with open(result_path, 'r') as file:
        print_json(file.read(), remove_common_attrs)

def main():
    '''
    main function
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument("type", help="""
        CP / PD / MON; will write to 'tmp/command_[type].json'
    """)
    parser.add_argument("command", help="""
        command json file, or '-' to read from stdin.

        Otherwise, if the file does not exist, it will try to fix it:

        If it seems to be a valid command name,
        it will try to wrap it to a valid command json without parameter;

        Then it will try to parse it as a json to see if it works;
        If none of above worked, it will raise an exception.
    """)
    parser.add_argument('--remove-common-keys', help="""
        Remove common key to help exam the response.
    """, dest='remove_common_attrs', type=str, default=True)

    args = parser.parse_args()

    cmd = ''
    if args.command == '-':
        print("hit enter then ctrl-d to commit your command. arrow key does not work.")
        cmd = sys.stdin.read()
    else:
        if file_exists(args.command):
            with open(args.command, 'r') as file:
                cmd = file.read()
        else:
            cmd = args.command

    remove_common_attrs = args.remove_common_attrs != 'False' and args.remove_common_attrs != 'false'
    poke(cmd, args.type, remove_common_attrs)

if __name__ == "__main__":
    main()
